import os, time, glob
import numpy as np
import math
import matplotlib.pyplot as plt
from scipy.misc import derivative as d
from scipy.optimize import fsolve
from scipy.optimize import brentq
from scipy.integrate import odeint

def contours(x):
	y=0
	if x==1:
		y=np.array([0.9569085080293696,
		0.9568142534237467,
		0.9567214951439166,
		0.9568553671840611,
		0.9573716229500692,
		0.958142147479506,
		0.9591679975688449,
		0.9602352458243414,
		0.9618196040199526,
		0.9632628255129431,
		0.9647644552268478,
		0.9658183657256232,
		0.96719053317378,
		0.9686905377766426,
		0.9706658393535138,
		0.9718226004225206,
		0.9731714163305706,
		0.973843608267222,
		0.9743531637204285,
		0.9746676419990241,
		0.97466061527841,
		0.9742091033993706,
		0.974012321056597,
		0.973623188405797])
	if x==2:
		y=np.array([0,
		0.004587155963302725,
		0.011061725242127174,
		0.020718196046074555,
		0.02948578669233637,
		0.03664588952096565,
		0.04383918105678117,
		0.049243168379073915,
		0.055303714908748,
		0.05930367561833291,
		0.061970316091389505,
		0.06318242539732433,
		0.06376146788990827,
		0.06318242539732433,
		0.059174311926605494,
		0.05504587155963303,
		0.04908256880733944,
		0.04266055045871561,
		0.035404920469651435,
		0.02818276918845647,
		0.0172737854350431,
		0.010091743119266028,
		0.004587155963302725,
		0])
	if x==3:
		y=np.array([0.9506280193236714,
		0.9503840148557182,
		0.9504647859970984,
		0.9507946026959234,
		0.9513098955409586,
		0.9518246028259424,
		0.9523401884510031,
		0.9529831821838656,
		0.9541720100559138,
		0.9557650370188434,
		0.9571633420282469,
		0.958919074132169,
		0.9602680371872073,
		0.9619221142073243,
		0.9633036641439409,
		0.9654317009051632,
		0.9663512253721935,
		0.9692557008193695,
		0.9706269360692116,
		0.9721888687090532,
		0.9734813515538643,
		0.9748974210863789,
		0.9763368980369123,
		0.9777353492814185,
		0.9787161902509507,
		0.979477764076748,
		0.9801116523508148,
		0.9806176803345956,
		0.980994846069781,
		0.9812429175010914,
		0.980982093873111,
		0.9805949085548277,
		0.9803332282741798,
		0.9803864734299517])
	if x==4:
		y=np.array([0,
		0.015057196657986383,
		0.008334479303773845,
		0.024925225428756637,
		0.03219788126436554,
		0.038561455120523336,
		0.046288651945857795,
		0.05363706461308762,
		0.060623527973684144,
		0.0675594867798667,
		0.07417798838687589,
		0.0820566988754522,
		0.08693976779364673,
		0.09176800319562042,
		0.09439424002514585,
		0.09706088049820244,
		0.0977275406164666,
		0.09833359526943403,
		0.09674270180539457,
		0.0939396990354203,
		0.09119561824559566,
		0.08764499502619064,
		0.08300041254935858,
		0.07694852394329832,
		0.07088797741362424,
		0.06415211284207217,
		0.05736430072883719,
		0.05025325946735293,
		0.04126344878166968,
		0.030034602850301323,
		0.021465663451401024,
		0.01490007137758742,
		0.0050011787124530915,
		0])
	if x==5:
		y=np.array([0.9613529524738139,
		0.9609715020165757,
		0.9607838792122796,
		0.960885520542481,
		0.9613724534267014,
		0.9620523275569146,
		0.962442346614664,
		0.9630253069184062,
		0.9637054765176025,
		0.9647715286087842,
		0.9656434575780406,
		0.9665142046713645,
		0.967384065357739,
		0.9684468672901061,
		0.9696056966419949,
		0.9707627531799848,
		0.9717248001891,
		0.9726865517292321,
		0.9736474168624147,
		0.9740282763816868,
		0.9744100223079082,
		0.974502504099632,
		0.9743051308188921,
		0.9739154072301259,
		0.9736234838747801])
	if x==6:
		y=np.array([0,
		0.008715596330275188,
		0.017431192660550432,
		0.025229357798165097,
		0.031192660550458717,
		0.03669724770642199,
		0.042201834862385296,
		0.04724770642201834,
		0.05321100917431193,
		0.058256880733944943,
		0.061926605504587146,
		0.06376146788990827,
		0.06422018348623851,
		0.06422018348623851,
		0.06330275229357796,
		0.059633027522935755,
		0.05321100917431193,
		0.04633027522935776,
		0.03807339449541283,
		0.029357798165137616,
		0.022018348623853184,
		0.015596330275229331,
		0.009174311926605505,
		0.004128440366972463,
		0])
	if x==7:
		y=np.array([0.9567149758454105,
		0.9565258756961987,
		0.9566316535921641,
		0.9567327039843991,
		0.9571239049180811,
		0.9576123151472173,
		0.9582942575603125,
		0.9589756090354414,
		0.9596557786346377,
		0.9609174311926605,
		0.9619840742218084,
		0.9632448403728817,
		0.9647933933135369,
		0.9662453278967039,
		0.968082258564907,
		0.9694343246317717,
		0.9705916766387448,
		0.9717496195836841,
		0.9729069715906572,
		0.9739671143021761,
		0.9751232844332165,
		0.9761828362067692,
		0.9767581143169495,
		0.9772367740696419,
		0.9777154338223344,
		0.9780011523290342,
		0.9784792211437603,
		0.97847449364003,
		0.9783719659028792,
		0.9782694381657284,
		0.9783595562055872,
		0.9783571924537221])
	if x==8:
		y=np.array([0,
		0.006880733944954087,
		0.021100917431192634,
		0.027981651376146777,
		0.03532110091743118,
		0.04357798165137616,
		0.05229357798165138,
		0.060091743119266045,
		0.06605504587155964,
		0.07477064220183485,
		0.08073394495412842,
		0.08807339449541285,
		0.09220183486238531,
		0.0963302752293578,
		0.09816513761467888,
		0.09724770642201835,
		0.09403669724770641,
		0.09174311926605505,
		0.08853211009174308,
		0.08440366972477062,
		0.0793577981651376,
		0.07431192660550459,
		0.06743119266055042,
		0.060550458715596306,
		0.05366972477064219,
		0.04724770642201834,
		0.039449541284403644,
		0.03211009174311927,
		0.022935779816513735,
		0.01376146788990823,
		0.003669724770642202,
		0])
	if x==9:
		y=np.array([0.954975845410628,
		0.955076895802863,
		0.955564715094033,
		0.9562454756311956,
		0.9571203592902834,
		0.9581872977884146,
		0.9595440913590095,
		0.9607082391525948,
		0.9627425431015378,
		0.9645812465836398,
		0.9665162729542466,
		0.9681587850315412,
		0.9695096692224733,
		0.9711495220789197,
		0.972208482914506,
		0.9732665573431428,
		0.9740347766993159,
		0.9747054912910517,
		0.9754731197092584,
		0.9758545701664967,
		0.9761402886731965,
		0.9762318840579709])
	if x==10:
		y=np.array([0,
		0.007339449541284404,
		0.014678899082568753,
		0.02155963302752295,
		0.029816513761467878,
		0.03623853211009173,
		0.04266055045871561,
		0.04999999999999999,
		0.058256880733944943,
		0.0628440366972477,
		0.06697247706422019,
		0.06697247706422019,
		0.06422018348623851,
		0.060091743119266045,
		0.05412844036697248,
		0.046788990825688076,
		0.039449541284403644,
		0.030733944954128428,
		0.0224770642201835,
		0.014678899082568753,
		0.008256880733944927,
		0])
	if x==11:
		y=np.array([0.9492753623188405,
		0.9493746398971767,
		0.9495720131779165,
		0.9498651184091949,
		0.9504495560578528,
		0.951228412297419,
		0.9519103547105141,
		0.952397878532701,
		0.953079525476813,
		0.9537611724209251,
		0.9546351696730635,
		0.9556051943447236,
		0.9566718373738716,
		0.9577381849340364,
		0.958902628196605,
		0.9599692712257529,
		0.9610362097238841,
		0.9621997665795032,
		0.9633630279661392,
		0.9646223167722967,
		0.9661702787749855,
		0.968008095850138,
		0.9693616392619184,
		0.9705210595517735,
		0.9717765072611502,
		0.9726442996646426,
		0.9735117965991519,
		0.9743778161887455,
		0.9751472174208512,
		0.9758202957644521,
		0.9764927831700866,
		0.9770686522182332,
		0.9777411396238679,
		0.9784142179674687,
		0.9789903824845986,
		0.9794705195822068,
		0.9796605061383681,
		0.9798493108185967,
		0.9799414971413375,
		0.9803247204124746,
		0.9807073527456455,
		0.9808973393018067,
		0.9811833532774896,
		0.9813727488956846,
		0.9816584674023844,
		0.9817509491941082,
		0.9817471080973273,
		0.9818401808270176,
		0.9818360442612536])
	if x==12:
		y=np.array([0,
		0.004587155963302725,
		0.011009174311926606,
		0.016055045871559648,
		0.023394495412844052,
		0.03256880733944953,
		0.041284403669724745,
		0.04816513761467889,
		0.05642201834862384,
		0.06467889908256882,
		0.07155963302752294,
		0.0775229357798165,
		0.08348623853211007,
		0.0889908256880734,
		0.09678899082568806,
		0.10275229357798163,
		0.10917431192660551,
		0.11559633027522934,
		0.12155963302752293,
		0.12660550458715594,
		0.12981651376146788,
		0.13302752293577982,
		0.13440366972477064,
		0.13440366972477064,
		0.13348623853211009,
		0.13073394495412843,
		0.1275229357798165,
		0.12201834862385322,
		0.11651376146788989,
		0.11146788990825687,
		0.10550458715596328,
		0.09954128440366972,
		0.09357798165137615,
		0.08853211009174308,
		0.08302752293577981,
		0.07844036697247705,
		0.07339449541284404,
		0.06651376146788987,
		0.059633027522935755,
		0.05458715596330274,
		0.04862385321100918,
		0.04357798165137616,
		0.03761467889908254,
		0.03165137614678898,
		0.025229357798165097,
		0.01880733944954127,
		0.012844036697247707,
		0.007339449541284404,
		0])
	return y

def compute(inA,inB,inV,sigmas,ranges,ptype,title):
	#Clear old plots
	for i in range(3):
		plt.figure(i+1)
		plt.gcf().clear()
	######################################################################
	#INPUT
	######################################################################
	#Parameter values and labels
	if ptype=='range':
		p_list = np.linspace(ranges[0],ranges[1],10)
	else:
		p_list = eval('np.array(['+ranges[2]+'])')
	N_list=eval('np.array(['+ranges[3]+'])')
	Nn=[]
	Nr=[]
	for i in range(len(N_list)):
		Nn.append([])
		Nr.append([])
	#Functions
	A = eval('lambda x:0*x+'+inA)
	B = eval('lambda x:0*x+'+inB)
	V = eval('lambda x:0*x+'+inV)
	F = lambda x: (3*(dA(x))**2/(2*A(x))+B(x))/A(x)+0*x
	######################################################################
	#FUNCTIONS
	######################################################################
	dA = lambda x: d(A,x,dx=0.001)
	dB = lambda x: d(B,x,dx=0.001)
	dV = lambda x: d(V,x,dx=0.001)
	ddA = lambda x: d(dA,x,dx=0.001)
	ddB = lambda x: d(dB,x,dx=0.001)
	ddV = lambda x: d(dV,x,dx=0.001)
	dF = lambda x: d(F,x,dx=0.001)
	
	r = lambda x: 8*((dV(x)*A(x)-2*V(x)*dA(x))/(A(x)*V(x)))**2/F(x)
	n = lambda x: 1-3*r(x)/8+2*(ddV(x)-4*dV(x)*dA(x)/A(x)-dV(x)*dF(x)/(2*F(x))-2*V(x)*ddA(x)/A(x)+6*V(x)*(dA(x)/A(x))**2+V(x)*dA(x)*dF(x)/(A(x)*F(x)))/(V(x)*F(x))
	#end=epsilon-1
	end = lambda x: r(x)/16-1
	#Integrand for e-folds
	def g(y,x):
		return (dV(y)*A(y)-2*V(y)*dA(y))/(A(y)*V(y)*F(y))
	######################################################################
	#CALCULATIONS
	######################################################################
	for e in p_list:
		global p
		p=e
		print('=============================')
		print('p= '+str(p))
		try:
			t=brentq(end,100,np.exp(-10))
		except:
			t=np.exp(-10)
			print('no end')
		print('scalar field end value= '+str(t))
		print('epsilon= '+str(end(t)+1))
		N=np.concatenate((np.linspace(0,100,1000),100+np.exp(np.linspace(0,20,100))))
		z=np.squeeze(odeint(g,t,N))
		#plot for epsilon
		plt.figure(1)
		plt.plot(z[:1000],end(z[:1000])+1)
		#plot for e-folds
		plt.figure(2)
		plt.plot(N[:1000],z[:1000])
		#ns-r plot
		plt.figure(3)
		plt.plot(n(z),r(z),label='p='+str(p))
		for q in range(len(N_list)):
			Nn[q].append(n(z)[np.argmin(np.abs(N-N_list[q]))])
			Nr[q].append(r(z)[np.argmin(np.abs(N-N_list[q]))])
		print('=============================')
	for q in range(len(N_list)):
		plt.plot(Nn[q],Nr[q],linestyle='--',marker='o' if q%2==0 else 'D',color='black',label='N='+str(N_list[q]))	
	######################################################################
	#PLANCK CONTOURS
	######################################################################
	#Planck contour display checklist
	display_Planck_1sigma=sigmas[0]
	display_Planck_2sigma=sigmas[1]
	display_Planck_BKP_1sigma=sigmas[2]
	display_Planck_BKP_2sigma=sigmas[3]
	display_Planck_BAO_1sigma=sigmas[4]
	display_Planck_BAO_2sigma=sigmas[5]
	#Load data points
	red1x=contours(1)
	red1y=contours(2)
	red2x=contours(3)
	red2y=contours(4)
	blue1x=contours(5)
	blue1y=contours(6)
	blue2x=contours(7)
	blue2y=contours(8)
	grey1x=contours(9)
	grey1y=contours(10)
	grey2x=contours(11)
	grey2y=contours(12)
	#Display
	alpha=0.2
	if display_Planck_1sigma:
		plt.fill(grey1x,grey1y,color='grey',alpha=alpha,label='Planck TT+lowP $1\sigma$')
		plt.plot(grey1x,grey1y,color='grey',linestyle='--')
	if display_Planck_2sigma:
		plt.fill(grey2x,grey2y,color='grey',alpha=alpha,label='Planck TT+lowP $2\sigma$')
		plt.plot(grey2x,grey2y,color='grey',linestyle='--')
	if display_Planck_BKP_1sigma:
		plt.fill(red1x,red1y,color='red',alpha=alpha,label='Planck TT+lowP+BKP $1\sigma$')
		plt.plot(red1x,red1y,color='red',linestyle='--')
	if display_Planck_BKP_2sigma:
		plt.fill(red2x,red2y,color='red',alpha=alpha,label='Planck TT+lowP+BKP $2\sigma$')
		plt.plot(red2x,red2y,color='red',linestyle='--')
	if display_Planck_BAO_1sigma:
		plt.fill(blue1x,blue1y,color='blue',alpha=alpha,label='Planck TT+lowP+BKP+BAO $1\sigma$')
		plt.plot(blue1x,blue1y,color='blue',linestyle='--')
	if display_Planck_BAO_2sigma:
		plt.fill(blue2x,blue2y,color='cyan',alpha=alpha,label='Planck TT+lowP+BKP+BAO $2\sigma$')
		plt.plot(blue2x,blue2y,color='blue',linestyle='--')
	######################################################################
	#PLOT LABELS
	######################################################################
	#ns-r
	plt.figure(3)
	plt.xlabel('Scalar spectral index $n_s$')
	plt.ylabel('Scalar-Tensor ratio $r$')
	plt.xlim(0.93,1)
	plt.ylim(0,0.25)
	plt.legend(loc='center left',bbox_to_anchor=(1,0.5))
	plt.tight_layout()#rect=[0,0,0.7,0.8])
	#plt.title(title)
	#epsilon
	plt.figure(1)
	plt.xlabel('$\phi$')
	plt.ylabel('$\epsilon$')
	plt.ylim(0,2)
	#e-folds
	plt.figure(2)
	plt.xlabel('$N$')
	plt.ylabel('$\phi_0$')
	######################################################################
	#SAVE DATA
	######################################################################
	#print(os.getcwd())
	if not os.path.isdir('static'):
		os.mkdir('static')
	else:
        # Remove old plot files
		for filename in glob.glob(os.path.join('static', '*.png')):
			os.remove(filename)
    # Use time since Jan 1, 1970 in filename in order make
    # a unique filename that the browser has not chached
	plotfiles=[]
	plt.figure(1)
	plotfile = os.path.join('static', str(time.time()) + '.png')
	plt.savefig(plotfile,bbox_inches="tight")
	plotfiles.append(plotfile)
	plt.figure(2)
	plotfile = os.path.join('static', str(time.time()) + '.png')
	plt.savefig(plotfile,bbox_inches="tight")
	plotfiles.append(plotfile)
	plt.figure(3)
	plotfile = os.path.join('static', str(time.time()) + '.png')
	plt.savefig(plotfile,bbox_inches="tight")
	plotfiles.append(plotfile)
	return plotfiles